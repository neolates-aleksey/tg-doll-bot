const User = require("../models/database/user.model");
const fs = require("fs");
const openAIService = require("../services/openai.service");
const path = require("path");

class StartHandler {
  async handle(msg, match) {
    const chatId = msg.chat.id;
    const referrer = match[1] ? match[1].trim() : null;

    try {
      // Find or create user
      const [user] = await User.findOrCreate({
        where: { chatId: chatId.toString() },
        defaults: {
          freeGenerations: process.env.FREE_GENERATIONS_LIMIT || 5,
          referralCount: 0,
        },
      });

      // Handle referral
      if (referrer) {
        const referrerId = referrer.toString();
        if (referrerId && referrerId !== chatId.toString()) {
          const referrerUser = await User.findByPk(referrerId);
          if (referrerUser) {
            // Update referral information
            await user.update({ referredBy: referrerId });
            await referrerUser.increment("referralCount");
            await referrerUser.increment("freeGenerations");

            await this.bot.sendMessage(referrerId, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!");
          }
        }
      }

      const response = await openAIService.generateImage("generate doll with red hair");
      const imageUrl = response.data[0].url;
      await this.bot.sendPhoto(chatId, imageUrl);

      const message = `
–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—É–∫–æ–ª –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é

üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: <b>${user.freeGenerations}</b>
‚ú® –•–æ—á–µ—à—å –±–æ–ª—å—à–µ?
- –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π (+1 –∑–∞ –∫–∞–∂–¥–æ–≥–æ)
- –ö—É–ø–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π

üëá –û–ø–∏—à–∏ –∫—É–∫–ª—É ‚Äî –∏ –ø–æ–ª—É—á–∏ —à–µ–¥–µ–≤—Ä!
`;

      // –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º)
      const image1Path = path.join(__dirname, "../assets/1.png");
      const image2Path = path.join(__dirname, "../assets/2.png");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã
      if (fs.existsSync(image1Path) && fs.existsSync(image2Path)) {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è sendMediaGroup
        const mediaGroup = [
          {
            type: "photo",
            media: fs.createReadStream(image1Path),
            caption: message,
            parse_mode: "HTML",
          },
          {
            type: "photo",
            media: fs.createReadStream(image2Path),
          },
        ];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        await this.bot.sendMediaGroup(chatId, mediaGroup);
      } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ù–∞—á–∞—Ç—å", callback_data: "start_generation" }],
              [{ text: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data: "referral_system" }],
              [{ text: "–ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data: "buy_generations" }],
            ],
          },
        };

        await this.bot.sendMessage(chatId, message, { ...keyboard, parse_mode: "HTML" });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ù–∞—á–∞—Ç—å", callback_data: "start_generation" }],
            [{ text: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data: "referral_system" }],
            [{ text: "–ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data: "buy_generations" }],
          ],
        },
      };

      await this.bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
    } catch (error) {
      console.error("Error in start handler:", error);
      await this.bot.sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  setBot(bot) {
    this.bot = bot;
  }
}

module.exports = new StartHandler();
